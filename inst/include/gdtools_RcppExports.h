// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __gdtools_RcppExports_h__
#define __gdtools_RcppExports_h__

#include <Rcpp.h>

namespace gdtools {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("gdtools", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("gdtools", "gdtools_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in gdtools");
            }
        }
    }

    inline NumericMatrix str_extents(CharacterVector x, std::string fontname = "sans", int fontsize = 12, int bold = false, int italic = false) {
        typedef SEXP(*Ptr_str_extents)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_str_extents p_str_extents = NULL;
        if (p_str_extents == NULL) {
            validateSignature("NumericMatrix(*str_extents)(CharacterVector,std::string,int,int,int)");
            p_str_extents = (Ptr_str_extents)R_GetCCallable("gdtools", "gdtools_str_extents");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_str_extents(Rcpp::wrap(x), Rcpp::wrap(fontname), Rcpp::wrap(fontsize), Rcpp::wrap(bold), Rcpp::wrap(italic));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline NumericVector str_metrics(std::string x, std::string fontname = "sans", int fontsize = 12, int bold = false, int italic = false) {
        typedef SEXP(*Ptr_str_metrics)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_str_metrics p_str_metrics = NULL;
        if (p_str_metrics == NULL) {
            validateSignature("NumericVector(*str_metrics)(std::string,std::string,int,int,int)");
            p_str_metrics = (Ptr_str_metrics)R_GetCCallable("gdtools", "gdtools_str_metrics");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_str_metrics(Rcpp::wrap(x), Rcpp::wrap(fontname), Rcpp::wrap(fontsize), Rcpp::wrap(bold), Rcpp::wrap(italic));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

}

#endif // __gdtools_RcppExports_h__
